C语言函数的重要特点
1、高度的独立性：任何函数只能引用属于自己的私有变量和全局变量，绝不能直接引用其他函数的私有变量；这意味着，不能再被调函数中，直接修改主调函数的私有变量的值；
2、函数的返回值最多只有1个，若需要通过被调函数同时得到多个结果，那是行不通的；
3、函数的参数（实参与形参）的关系，在C语言函数中，只有一种：值传递（传递的是值，只不过是这个值可能是普通的值，也可能是地址值）且这种传递方式 所产生的的必然结果是：对被调函数的形参变量所进行的任何更改，绝对不会影响主调函数的实参的值！
综上所述：上述三个特点将对C语言函数的功能产生巨大的束缚，在上述情况存在的前提下，C函数是无法实现的：同时更改主调函数中多个私有变量值的功能。
=================================
指针的概念就是为了上述C语言致命的问题而提出来的！
指针解决上述问题的具体方法：
1、将需要更改的变量（空间）的首地址作为实参；
2、被调函数对应的形参变量必须是上述变量的指针类型进行接收，这将使被调函数的形参变量指向主调函数中，需要更改的那个变量。
3、在被调函数中，通过*指向运算，间接地修改主调函数相关变量的值；
=======================变量生命域与作用域===============================
全局变量与局部变量
1、全局变量的定义是在{}之外进行的；在{}之内定义的变量和所有的形参变量都是局部变量；
2、全局变量能被那些在书写顺序上，其后定义的函数所引用；局部变量只能被定义它的函数所引用；
3、全局变量的空间是在主函数运行之前申请的且在主函数运行结束后（即：整个程序运行完毕后）才释放空间的；局部变量是在定义它的函数被调用时才申请空间的，且随着函数运行结束而释放空间的。
4、全局变量在定义后赋值前，其值由C语言强制赋值为0；局部变量在定义后赋值前，其值为垃圾；
5、全局变量的使用，可使得程序设计变得方便，但这种方便会带来函数之间耦合程度的增加，不利于大中型软件开发，不利于团队开发，也不利于软件的维护；全局变量的使用必须要谨慎。
变量存储类型
自动存储类：auto:(可缺省)int a;<=>auto signed int
静态存储类：static
寄存器存储类：register
外部存储类：extern
====================================
1、自动存储类变量和静态存储类变量的定义：
int a;
static int b;
2、静态存储类变量是在主函数运行前申请空间，且在整个程序运行结束后释放；自动存储类变量是在定义它的函数被调用时才申请空间，且在定义它的函数运行结束后释放其空间；
3、静态存储类变量在定义后未赋值前，其值被C语言强行赋值为0；自动存储类变量在定义后未赋值前，其值为垃圾值；
4、静态存储变量、如果是局部变量，则只能被定义它的函数所引用；
5、若某函数被多次调用且该函数定义有静态存储类变量；则调用该函数结束后，他所定义的自动存储类变量的空间都被释放，而静态存储类变量的空间是不被释放的；在下一次该函数被调用时，静态存储类空间的值是在上一次调用结束的基础上进行再一次引用的，因此静态存储类变量具有“累加”效应
===================结构体与共用体==================
1、结构体
struct STUDENT_INFO{
    char Id[9];
    char Name[15];
    int Age;
    double Score;
};

struct STUDENT_INFO a;//这个a就是结构体数据类型的一个实例，里面是包含那么几个变量的。
//结构体的长度是所有成员的长度之和
结构体是C语言中具有“自我扩充能力”的重要机制；是C语言数据类型的强力扩充
注意：结构体的定义本身仅仅是“设计、蓝图”,并不占内存空间，当将其实例化后，这个实例才真正的占用存储空间。
    .运算符，结构体实例将其取其成员的运算符；
    ->运算符，指向结构体实例的指针取其成员的运算符；
定义结构体时，赋初值的初值顺序，必须保证与结构体中成员数据类型是一致的；两个完全一模一样的结构体实例，之间是可以进行赋值操作的。
2、共用体
union TEST{
    int a;
    char b;
    double c;
}
union TEST a,*p = &a;
a.a <==> p->a
a.b <==> p->b
a.c <==> p->c
//两边表达的是同一个意思，就是取共用体成员的值
共用体的诸成员共同使用同一起始地址空间;共用体的空间大小取决于共用体中，长度为最长的成员的长度。
sizeof(union TEST) -> 8B
==================================宏定义与用户自定义类型========================================
1、宏定义
#define 标识符，被替换的信息（不能随便出现分号）
#define PI 3.1415926
宏替换不能改变运算量，就是简简单单的完全替换就好
    1、提高程序的可维护性：就是针对同一个数字，可能在代码中多次出现，为了方便修改，上面用个宏替换，可以达到只修改一处，其他地方都被修改的好处。
    2、提高程序的可读性：用宏替换，便于理解每一个数字所代表的的任文华含义，可以知道代表的是什么意思。
2、 用户自定义类型：typedef 是关键字
格式：typedef 已有类型 新类型
typedef int a,b,c;
int n; <==> a n;
#define DI int *
typedef int * TI;//这条语句所产生的新类型是TI，其对应的数据类型为int *
====================================动态存储分配==============================================

